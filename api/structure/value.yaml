customer-order-service/
â”œâ”€â”€ api/                          # Django project
â”‚   â”œâ”€â”€ customers/                # App for customer logic
â”‚   â”‚   â”œâ”€â”€ models.py             # Customer model
â”‚   â”‚   â”œâ”€â”€ schema.py             # GraphQL types/queries/mutations
â”‚   â”œâ”€â”€ orders/                   # App for order logic
â”‚   â”‚   â”œâ”€â”€ models.py             # Order model
â”‚   â”‚   â”œâ”€â”€ schema.py             # GraphQL types/queries/mutations
â”‚   â”œâ”€â”€ config/                   # Django settings
â”‚   â”‚   â”œâ”€â”€ settings/
â”‚   â”‚   â”‚   â”œâ”€â”€ base.py
â”‚   â”‚   â”‚   â”œâ”€â”€ production.py    # K8s/Ansible-managed settings
â”‚   â”‚   â”‚   â””â”€â”€ local.py
â”‚   â”œâ”€â”€ schema.py                 # Root GraphQL schema
â”œâ”€â”€ deployments/
â”‚   â”œâ”€â”€ helm/                     # Helm chart
â”‚   â”‚   â”œâ”€â”€ Chart.yaml
â”‚   â”‚   â”œâ”€â”€ values.yaml
â”‚   â”‚   â””â”€â”€ templates/
â”‚   â”‚       â”œâ”€â”€ deployment.yaml
â”‚   â”‚       â”œâ”€â”€ service.yaml
â”‚   â”‚       â””â”€â”€ ingress.yaml
â”‚   â”œâ”€â”€ ansible/                  # Ansible playbooks
â”‚   â”‚   â”œâ”€â”€ playbooks/
â”‚   â”‚   â”‚   â”œâ”€â”€ deploy.yml       # For non-K8s Ubuntu servers
â”‚   â”‚   â”‚   â””â”€â”€ postgresql.yml
â”‚   â”‚   â””â”€â”€ roles/
â”‚   â”‚       â””â”€â”€ django-app/
â”œâ”€â”€ tests/                        # Test suite
â”‚   â”œâ”€â”€ unit/
â”‚   â”‚   â”œâ”€â”€ test_models.py
â”‚   â”‚   â””â”€â”€ test_schemas.py
â”‚   â””â”€â”€ integration/
â”‚       â””â”€â”€ test_auth.py
â”œâ”€â”€ Dockerfile                    # Multi-stage build
â”œâ”€â”€ docker-compose.yml            # Local Postgres + Django
â”œâ”€â”€ .github/workflows/            # CI/CD
â”‚   â””â”€â”€ ci-cd.yml
â”œâ”€â”€ .env.sample                   # Environment variables
â””â”€â”€ README.md                     # Deployment/usage guide


customer-order-service/
â”œâ”€â”€ api/
â”‚   â”œâ”€â”€ users/                     # New app for authentication
â”‚   â”‚   â”œâ”€â”€ models.py             # Custom user model (if needed)
â”‚   â”‚   â”œâ”€â”€ schema.py             # Auth mutations/queries (login, tokens)
â”‚   â”‚   â”œâ”€â”€ middleware.py         # Custom auth middleware
â”‚   â”‚   â”œâ”€â”€ backends.py           # OIDC auth backend
â”‚   â”‚   â””â”€â”€ admin.py              # Custom admin auth config
â”‚   â”œâ”€â”€ customers/
â”‚   â”œâ”€â”€ orders/
â”‚   â”œâ”€â”€ config/
â”‚   â””â”€â”€ schema.py                 # Merge auth schemas here
â”œâ”€â”€ deployments/
â”‚   â”œâ”€â”€ helm/
â”‚   â”‚   â””â”€â”€ templates/
â”‚   â”‚       â””â”€â”€ configmap.yaml    # Store OIDC env vars here
â”œâ”€â”€ tests/
â”‚   â”œâ”€â”€ integration/
â”‚   â”‚   â””â”€â”€ test_auth.py          # Auth test cases
â””â”€â”€ .env.sample                   # Add OIDC_CLIENT_ID/SECRET



# requirements.txt
# pip freeze > requirements.txt
# myproject/
# â”œâ”€â”€ myapp/
# â”œâ”€â”€ manage.py
# â”œâ”€â”€ requirements.txt  ğŸ‘ˆ
# pip install -r requirements.txt
# Django>=4.2
# mozilla-django-oidc>=2.0.0
# graphene-django